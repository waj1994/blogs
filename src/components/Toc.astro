---
import type { MarkdownHeading } from 'astro'

type Props = {
  headings: MarkdownHeading[]
}

const { headings } = Astro.props

const min = headings.reduce((prev, next) => {
  return prev > next.depth ? next.depth : prev
}, 6)
// 只展示3级
const links = headings.filter((heading) => heading.depth < min + 2)
---

<ul class={`pl-4 py-8 ${links.length <= 1 ? 'hidden' : ''}`}>
  <div class="font-semibold">页面导航</div>
  {
    links.map((heading) => (
      <li
        class="text-sm toc-item mt-3"
        style={{ paddingLeft: `${heading.depth - min}rem` }}
      >
        <a
          class="leading-32px"
          href={`#${heading.slug}`}
        >
          {heading.text}
        </a>
      </li>
    ))
  }
  <li class="mt-3 pt-3 border-t border-gray-200 dark:border-gray-600">
    <a
      href=""
      id="go-to-top"
      class="text-gray-400 hover:text-gray-500 text-sm"
    >
      回到顶部
    </a>
  </li>
</ul>

<script type="module">
  import throttle from '/js/throttle.js'

  const toclistDom = document.querySelectorAll('.toc-item')
  if (Array.from(toclistDom).length) {
    const targetList = []

    const topBtn = document.getElementById('go-to-top')
    topBtn.addEventListener('click', (e) => {
      e.preventDefault()
      window.scrollTo({
        top: 0,
        behavior: 'smooth',
      })
    })

    toclistDom.forEach((item) => {
      const link = item.querySelector('a')
      const id = link.getAttribute('href')
      const el = document.getElementById(id.slice(1))
      const a = document.createElement('a')
      el.removeAttribute('id')
      a.setAttribute('id', id.slice(1))
      a.classList.add('anchor')
      el.appendChild(a)
      // 点击滚动效果
      link.addEventListener('click', (e) => {
        e.preventDefault()
        window.scrollTo({
          top: el.offsetTop - 100,
          behavior: 'smooth',
        })
      })
      targetList.push({
        el,
        link,
      })
    })
    targetList.reverse()

    const clearActive = () => {
      targetList.forEach((item) =>
        item.link.classList.remove('active')
      )
    }

    const scroll = throttle(() => {
      const { innerHeight } = window
      const { scrollY } = window
      const show = scrollY >= innerHeight * 1.5
      if (show) {
        topBtn.parentNode.classList.remove('hidden')
      }
      if (!show) {
        topBtn.parentNode.classList.add('hidden')
      }
      const current = targetList.find((item) => {
        const { el } = item
        return el.offsetTop - 200 <= scrollY
      })
      if (current) {
        clearActive()
        current.link.classList.add('active')
      }

      if (
        document.documentElement.scrollHeight - window.innerHeight <=
        scrollY
      ) {
        clearActive()
        targetList[0].link.classList.add('active')
      }
    }, 300)

    scroll()
    window.addEventListener('scroll', scroll)

    window.addEventListener('unload', () => {
      window.removeEventListener('scroll', scroll)
    })
  }
</script>

<style lang="less" scoped>
  .active {
    @apply text-primary;
  }
</style>
